""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""" VIM Specifi mapping for the fr-dvorak / bépo keyboard layout
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let my_layout="bepo"

""""""""""""""""""""{{{ Keyboard remapping
" {W} -> [É]
" ——————————
" On remappe W sur É :
noremap é w
noremap É W
" Corollaire, pour effacer/remplacer un mot quand on n’est pas au début (daé / laé).
" (attention, cela diminue la réactivité du {A}…)
noremap aé aw
noremap aÉ aW
" Pour sauvegarder
noremap :é :w
noremap :É :W
noremap .é :w
noremap .É :W
" Pour faciliter les manipulations de fenêtres, on utilise {W} comme un Ctrl+W :
noremap w <C-w>
noremap W <C-w><C-w>

" [HJKL] -> {CTSR}
" ————————————————
" {cr} = « gauche / droite »
noremap c h
noremap r l
" {ts} = « haut / bas »
noremap t j
noremap s k
" {CR} = « haut / bas de l'écran »
noremap C H
noremap R L
" {TS} = « joindre / aide »
noremap T J
noremap S K
" Corollaire : repli suivant / précédent
noremap zs zj
noremap zt zk

" {HJKL} <- [CTSR]
" ————————————————
" {J} = « Jusqu'à »            (j = suivant, J = précédant)
noremap j t
noremap J T
" {L} = « Change »             (l = attend un mvt, L = jusqu'à la fin de ligne)
noremap l c
noremap L C
" {H} = « Remplace »           (h = un caractère slt, H = reste en « Remplace »)
noremap h r
noremap H R
" {K} = « Substitue »          (k = caractère, K = ligne)
noremap k s
noremap K S
" Corollaire : correction orthographique
noremap ]k ]s
noremap [k [s

" Désambiguation de {g}
" —————————————————————
" ligne écran précédente / suivante (à l'intérieur d'une phrase)
noremap gs gk
noremap gt gj
" onglet précédant / suivant
noremap gb gT
noremap gé gt
" optionnel : {gB} / {gÉ} pour aller au premier / dernier onglet
noremap gB :exe "silent! tabfirst"<CR>
noremap gÉ :exe "silent! tablast"<CR>
" optionnel : {g"} pour aller au début de la ligne écran
noremap g" g0

" Remaper la gestion des fenêtres
" ———————————————————————————————
noremap wt <C-w>j
noremap ws <C-w>k
noremap wc <C-w>h
noremap wr <C-w>l
noremap wd <C-w>c
noremap wo <C-w>s
noremap wp <C-w>o
noremap w<SPACE> :split<CR>
noremap w<CR> :vsplit<CR>

" Limiter <shift> en mode normal
" ——————————————————————————————
" allows to use . instead of :
nnoremap . :
" enable '.' (repeat last action)
noremap … .
noremap ~ .

" Doubler certaints raccourcis pénibles
" —————————————————————————————————————
noremap k $
noremap è y
noremap è y
noremap zj za

"}}}

""""""""""""""""""""{{{ KEYBINDINGS

" Ease access to visual mode commands
map v <C-v>
vmap i <S-i>

" Map for Bloc selection ?
map  # {v}! par 72<CR>
map  & {v}! par 72j<CR>

" Map split swing
nmap  <Tab> <C-w>w

" Toggle spelling (and spell language choice)
"map  <leader>se :setlocal spell! spelllang=en<CR>
"map  <leader>sf :setlocal spell! spelllang=fr<CR>
nmap <leader>se :echo ToggleSpell("en_gb")<CR>
nmap <leader>sf :echo ToggleSpell("fr")<CR>

" Toggle highlight search
map  <Space> :set invhls<CR>

" Toggle CursorLine/-Column highlighting
" Note that CursorLine/-Column usage may significatively slow vim (especially with big file)
nmap <leader>c! :set cursorline!<cr>
nmap <leader>c? :set cursorcolumn!<cr>

" Toggle Paste mode
set pastetoggle=<F2>

" In visual mode, replace block
cmap <C-g> <C-u><ESC>

" Allows sticky shift to go through as planned
" -bang ... <bang> allows exclamation mark to work as well
command! -bang W w<bang>
command! -bang Q q<bang>
command! -bang WQ wq<bang>
command! -bang Wq wq<bang>

" uses sudo mode afterwards
cmap w!! w !sudo tee % >/dev/null
cmap é!! w !sudo tee % >/dev/null

" Forces to get used to vim interface.
"map <up> <nop>
"map <down> <nop>
"map <left> <nop>
"map <right> <nop>

" alternative for the unreachable escape key
" (Note that CTRL+C is also a native alternative)
inoremap tsr <ESC>

" Smart way to move between windows
map <C-c> <C-W>j
map <C-t> <C-W>k
map <C-s> <C-W>h
map <C-r> <C-W>l

" Ease long inner navigation (move half-screen up or down)
noremap <C-S-t> <C-U>
noremap <C-S-s> <C-D>

" Move a line of text using ALT+[ts]
" NB: it seems it does not work (<A- > or <M- > seems to have none effect :-( )
nmap <M-t> mz:m+<cr>`z
nmap <M-s> mz:m-2<cr>`z
vmap <M-t> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-s> :m'<-2<cr>`>my`<mzgv`yo`z

" Useful mappings for managing tabs
nnoremap <leader>n :tabnew<cr>
nnoremap <leader>e :tabe .<cr>
nnoremap <leader>o :tabe ./
nnoremap <leader>m :tabmove
" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
nnoremap <leader>h :tabedit <c-r>=expand("%:p:h")<cr>/

" cd to the directory containing the file in the buffer
nmap  <leader>cd :lcd %:h

" Toggle displayed text wrapping
map <leader>sw :set wrap!<cr>

" « v,uo » lance firefox avec l'url courante
vmap <leader>uo :<C-U>!firefox "<cfile>" >& /dev/null<CR><CR>
" « v,ud » et « v,us » lancent firefox et une recherche (définition ou synonyme) dans le tlfi sur le mot courant
vmap <leader>ud :<C-U>!firefox "http://www.cnrtl.fr/lexicographie/<cword>" >& /dev/null<CR><CR>
vmap <leader>us :<C-U>!firefox "http://www.cnrtl.fr/synonymie/<cword>" >& /dev/null<CR><CR>
" « v,ug » comme ci-dessus mais pour google
vmap <leader>ug :<C-U>!firefox "http://www.google.fr/search?hl=fr&q=<cword>&btnG=Recherche+Google&meta=" >& /dev/null<CR><CR>
" « v,uw » comme ci-dessus mais pour wikipedia
vmap <leader>uw :<C-U>!firefox "http://fr.wikipedia.org/wiki/<cword>" >& /dev/null<CR><CR>
" « v,uc » comme ci-dessus mais pour le conjugueur
vmap <leader>uc :<C-U>!firefox "http://www.leconjugueur.com/php5/index.php?v=<cword>" >& /dev/null<CR><CR>
" « v,ut » comme ci-dessus mais pour le conjugueur
vmap <leader>ut :<C-U>!firefox "https://translate.google.com/#en/fr/<cword>" >& /dev/null<CR><CR>

" Map to insert python debugger
map  <leader>pdb <Esc>import pdb;pdb.set_trace()<CR><Esc>
map  <F10> <Esc>import pdb;pdb.set_trace()<CR><Esc>

"}}}

""""""""""""""""""""{{{ CUSTOM FUNCTIONS KEYBINDINGS
:command -nargs=+ Find vimgrep <args>|cw

""" FocusMode
nnoremap <F8> :call ToggleFocusMode()<cr>
nnoremap <leader>tf :call ToggleFocusMode()<cr>

""" Allow/disallow textwidth formating
nnoremap <F4> :call ToggleTextwidthMode()<cr>
nnoremap <leader>tw :call ToggleTextwidthMode()<cr>

""" Switch between tab value
nnoremap <F5> :call SwitchTabValue()<cr>
nnoremap <leader>stv :call SwitchTabValue()<cr>

" Delete trailing white space 
nnoremap <F6> :call DeleteTrailingWS()<cr>
nnoremap <leader>cws :call DeleteTrailingWS()<cr>

"}}}

""""""""""""""""""""{{{ PLUGINS

""" NerdTree
nmap k :NERDTreeToggle<cr>
nmap <C-b> :NERDTreeToggle<cr>
let NERDTrheMapOpenInTab='h'
let NERDTreeMapOpenInTabSilent='H'
let NERDTreeMapOpenVSplit='<C-v>'
let NERDTreeMapJumpFirstChild='S'
let NERDTreeMapJumpLastChild='T'
let NERDTreeMapJumpNextSibling='<C-T>'
let NERDTreeMapJumpPrevSibling='<C-S>'
"let NERDTreeMapChdir='L'
"let NERDTreeMapRefresh='j'
"let NERDTreeMapRefreshRoot='J'

""" EasyMotion
" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `j{char}{char}{label}`
nmap j <Plug>(easymotion-s2)
" JK motions: Line motions
map .c <Plug>(easymotion-linebackward)
map .t <Plug>(easymotion-j)
map .s <Plug>(easymotion-k)
map .r <Plug>(easymotion-lineforward)

""" Jedi
" Below are default shorcuts
"let g:jedi#goto_assignments_command = "<leader>g"
"let g:jedi#goto_definitions_command = "<leader>d"
"let g:jedi#documentation_command = "K"
"let g:jedi#usages_command = "<leader>n"
"let g:jedi#completions_command = "<C-Space>"
"let g:jedi#rename_command = "<leader>r"

""" YouCompleteMe
" disables auto closing of the preview window when the user accepts the offered
" completion string
"let g:ycm_autoclose_preview_window_after_completion=1
" Jedi's jump to definition/declaration feature
" nnoremap <leader>e :YcmCompleter GoToDefinitionElseDeclaration<CR>

""" Surround
" http://vimawesome.com/plugin/surround-vim
" change: cs"' or cs'<q> or cst" or ...
" add:  ysiw]  or ysiw<em> or ...
" delete: ds" or ds{ds) or ...
" visual mode (line): V then S<p class="important">
" TODO Change mapping (conflicting with "ctsr" in bepo)

"}}}

""""""""""""""""""""{{{ OTHER COMMAND REFERENCES

" *                     - searches for word under cursor
" gd                    - finds definition of variable/function under cursor
" ga                    - prints the ascii value of character under cursor
" gf                    - opens file under the cursor (in split view)
" gi                    - goes to insert mode in the same spot as you last inserted
" ~                     - changes case of character
" :r !<cmd>             - reads the output of the shell <cmd> into the file

" :% s/hello/A/gc       - typical search and replace command (ask for confirmation)
" :% !tidy              - runs the code through the 'tidy' program

" za        - fold toggle   toggles between open/closed fold (zA does it recursively)
" zf        - create/define a fold (compatible with motion or visual mode)
" zc        - fold close    (zC is recursive)
" zo        - fold open     (zO is recursive)
" zm        - fold more     increases foldlevel by 1 (zM opens all folds)
" zr        - fold reduce   decreses foldlevel by 1 (zR closes all folds
"
" z=        spell
" zg/zw     mark as good/wrong (add)
" zug/zuw   undo marking
" zG/zW     mark as good/wrong, for the session

" Native alternative to <ESC> : <CTRL + C >

" * register refers to the system clipboard
" e.g. :    copy   "*dd    or  1G"*yG
"           paste  "*dd    or  1G"*yG

" +2yy      - copy two lines to X11 clipboard
" +dd       - cut line to X11 clipboard
" +p        - paste X11 clipboard

" see also  set clipboard=unnamed

"}}}
